eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgdGVzdDoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcnVieQogICAgY29tbWFuZHM6CiAgICAgIC0gYnVuZGxlIGluc3RhbGwKICAgICAgLSBidW5kbGUgZXhlYyByc3BlYwogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKCiAgYnVpbGQtYW5kLXB1c2gtaW1hZ2U6CiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwraG9fZXhhbXBsZV9kYXNoYm9hcmQiIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9oby1leGFtcGxlLWRhc2hib2FyZDoke0RST05FX0NPTU1JVF9TSEF9IC4KICAgICAgLSBkb2NrZXIgdGFnIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9oby1leGFtcGxlLWRhc2hib2FyZDoke0RST05FX0NPTU1JVF9TSEF9IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9oby1leGFtcGxlLWRhc2hib2FyZDpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvaG8tZXhhbXBsZS1kYXNoYm9hcmQ6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9oby1leGFtcGxlLWRhc2hib2FyZDpsYXRlc3QKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIGRlcGxveS1pbWFnZToKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6bGF0ZXN0CiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBLVUJFX05BTUVTUEFDRT1kZXYtaW5kdWN0aW9uCiAgICBjb21tYW5kczoKICAgICAgLSBleHBvcnQgS1VCRV9TRVJWRVI9JHtLVUJFX1NFUlZFUl9ERVZ9CiAgICAgIC0gY2Qga3ViZXJuZXRlc19kZXBsb3ltZW50CiAgICAgIC0ga2QgLS1pbnNlY3VyZS1za2lwLXRscy12ZXJpZnkgLS1maWxlIGdoX3VzZXJfc2VjcmV0LnlhbWwgLS1maWxlIGRlcGxveW1lbnQueWFtbCAtLWZpbGUgc2VydmljZS55YW1sIC0tZmlsZSBpbmdyZXNzLnlhbWwKICAgIHdoZW46CiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5Igo.DJTKjhzA6XRM-BFp5Nt1MM-g4LSahoOmc0BL5Bl86iY